/*
 * Copyright 2015-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentest4j.fixtures;

import static java.util.Collections.emptyList;
import static org.opentest4j.fixtures.Utils.checkNotNull;
import static org.opentest4j.fixtures.Utils.toUnmodifiableList;

import java.lang.annotation.Annotation;
import java.util.List;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Simple wrapper around {@link Class}.
 *
 * @author Kevin Cooney
 * @since 1.1
 */
public final class ClassWrapper {
	private final ReentrantLock lock = new ReentrantLock();
	private final Class<?> wrappedClass;
	private volatile List<Annotation> annotations;

	public ClassWrapper(Class<?> classToWrap) {
		wrappedClass = checkNotNull(classToWrap);
	}

	public ClassWrapper(Class<?> classToWrap, List<Annotation> classAnnotations) {
		wrappedClass = checkNotNull(classToWrap, "classToWrap cannot be null");
		annotations = toUnmodifiableList(checkNotNull(classAnnotations, "classAnnotations cannot be null"));
	}

	@Override
	public String toString() {
		return wrappedClass.toString();
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + getAnnotations().hashCode();
		result = prime * result + wrappedClass.hashCode();
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (!(obj instanceof ClassWrapper)) {
			return false;
		}
		ClassWrapper other = (ClassWrapper) obj;
		if (!wrappedClass.equals(other.wrappedClass)) {
			return false;
		}
		if (annotations == other.annotations) {
			return true;
		}
		return getAnnotations().equals(other.getAnnotations());
	}

	/**
	 * Returns the underlying Java class.
	 */
	public Class<?> getJavaClass() {
		return wrappedClass;
	}

	/**
	 * Gets the annotations on the underlying Java class.
	 */
	public List<Annotation> getAnnotations() {
		if (annotations == null) {
			lock.lock();
			try {
				if (annotations == null) {
					if (wrappedClass == null) {
						annotations = emptyList();
					}
					else {
						annotations = toUnmodifiableList(wrappedClass.getAnnotations());
					}
				}
			}
			finally {
				lock.unlock();
			}
		}
		return annotations;
	}
}
